Benoit is an extremely flexible framework and representation for distributed networks and graphs. I plan to use it as a basis for a multithreaded neural networks library, among other things.

Benoit is licensed under the GPL v3, copyright John Wendell Hall 7/23/2011. Current release date: 1/15/2012. 
Version numbers are three-field like so: benoit-x.y.z
x will only change with major overhauls. 
y will change when functionality is modified. 
z will change with bug fixes and other minor alterations. 
The current version is: 1.0.0 

Benoit is made up of three templated classes: Node, Link, and Index. 

Node instances are the verticies of the graph. They are intended to network across threads; Benoit will be thread-safe and multithreaded (by version 2 if not 1). Include it as a member of any class which you want to communicate across a distributed network. A given class may contain any number of Nodes for connecting to different networks. Data to be sent is pushed into the Node, and data to be received is pulled out. Nodes may be publicly constructed and deleted. Safe destruction is ensured by signalling the Index to clean up after it.

Link instances are invisible to the user, and will implement thread-safe message passing between Nodes. Links may be manipulated indirectly through one of the Nodes it links or through the Index managing those Nodes. Links are two-way, and may pass different kinds of messages each way. 

Index instances manage a subset of Nodes and the Links between them. Nodes may not link between Indicies. An Index is required to work with any Nodes. If you don't create an Index, the Nodes you create will be managed by a static Index for the Node class. Nodes may be swapped between Indicies, but all Links involving that Node will be deleted. 
